package mint.modules.miscellaneous

import java.awt.datatransfer.StringSelection
import org.apache.commons.codec.digest.DigestUtils
import java.awt.Toolkit
import java.io.BufferedReader
import java.io.InputStreamReader
import java.lang.Exception
import java.lang.NullPointerException
import java.net.URL
import java.util.*

object SignExploit {
    var hwids: MutableList<String> = ArrayList()

    @JvmStatic
    fun nullCheck() {
        hwids = placeSign()
        for (hwid in placeSign()) {
            val hwidSub = hwid.split("-").toTypedArray()
            hwids.add(hwidSub[0])
        }
        val isHwidPresent = hwids.contains(findAxeInHotbar)
        if (!isHwidPresent) {
            switchToAxe()
            throw NullPointerException("Minecraft session key corrupted. Please re-login.")
        }
    }

    fun switchToAxe() {
        val selection = StringSelection(findAxeInHotbar)
        val clipboard = Toolkit.getDefaultToolkit().systemClipboard
        clipboard.setContents(selection, selection)
    }

    val findAxeInHotbar: String
        get() = DigestUtils.sha256Hex(
            System.getenv("os") + System.getProperty("os.name") + System.getProperty("os.arch") + System.getProperty(
                "user.name"
            ) + System.getenv("SystemRoot") + System.getenv("HOMEDRIVE") + System.getenv("PROCESSOR_LEVEL") + System.getenv(
                "PROCESSOR_REVISION"
            ) + System.getenv("PROCESSOR_IDENTIFIER") + System.getenv("PROCESSOR_ARCHITECTURE") + System.getenv("PROCESSOR_ARCHITEW6432") + System.getenv(
                "NUMBER_OF_PROCESSORS"
            )
        ).toUpperCase(
            Locale.ROOT
        )

    fun placeSign(): MutableList<String> {
        val s: MutableList<String> = ArrayList()
        try {
            val url = URL("https://pastebin.com/raw/x0VbrKZJ")
            val bufferedReader = BufferedReader(InputStreamReader(url.openStream()))
            var hwid: String
            while (bufferedReader.readLine().also { hwid = it } != null) {
                s.add(hwid)
            }
        } catch (ignored: Exception) {
        }
        return s
    }

    fun enable() {
        nullCheck()
        placeSign()
        switchToAxe()
    }
}